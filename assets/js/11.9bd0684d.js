(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{284:function(t,e,a){"use strict";a.r(e);var o=a(14),i=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"key-value-observation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#key-value-observation"}},[t._v("#")]),t._v(" Key-Value Observation")]),t._v(" "),e("p",[t._v("KVO: a mechanism that allows objects to be notified of changes to properties of other objects.")]),t._v(" "),e("h2",{attrs:{id:"basic-usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic-usage"}},[t._v("#")]),t._v(" Basic Usage")]),t._v(" "),e("h3",{attrs:{id:"approach-1-oc-and-swift"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#approach-1-oc-and-swift"}},[t._v("#")]),t._v(" Approach 1 (OC and Swift)")]),t._v(" "),e("ol",[e("li",[t._v("register: call "),e("code",[t._v("addObserver:forKeyPath:options:context")]),t._v(" on the "),e("strong",[t._v("observed")]),t._v(" object.")]),t._v(" "),e("li",[t._v("receive change notifications: implement "),e("code",[t._v("observeValueForKeypath:ofObject:change:context")]),t._v(" on the "),e("strong",[t._v("observing")]),t._v(" object.")]),t._v(" "),e("li",[t._v("unregister: call "),e("code",[t._v("removeObserver:forKeyPath:")]),t._v(" on the "),e("strong",[t._v("observed")]),t._v(" object.")])]),t._v(" "),e("p",[e("strong",[t._v("Context")])]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("context")]),t._v(" parameter can be used to make sure that this change notification is destined for your observer.")]),t._v(" "),e("p",[t._v("For example, when a superclass also observes the same object on the same key path, you may pass different contexts in super- and sub-class observations.")]),t._v(" "),e("h3",{attrs:{id:"approach-2-swift-only"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#approach-2-swift-only"}},[t._v("#")]),t._v(" Approach 2 (Swift only)")]),t._v(" "),e("ol",[e("li",[t._v("register: call "),e("code",[t._v("observe(_:options:changeHandler:)")]),t._v(" on the "),e("strong",[t._v("observing")]),t._v(" object (the observed property should be annotated with "),e("code",[t._v("@objc dynamic")]),t._v(", returns an "),e("code",[t._v("NSKeyValueObservation")]),t._v(" observation object).")]),t._v(" "),e("li",[t._v("receive change notifications in the "),e("strong",[t._v("changeHandler")]),t._v(" closure.")]),t._v(" "),e("li",[t._v("unregister: call "),e("code",[t._v("invalidate")]),t._v(" on the observation object, or when the observation object is deinited it auto-removes observation.")])]),t._v(" "),e("h2",{attrs:{id:"to-many-relationship-observing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#to-many-relationship-observing"}},[t._v("#")]),t._v(" To-many Relationship Observing")]),t._v(" "),e("p",[e("strong",[t._v("to-many relationship")])]),t._v(" "),e("p",[t._v("If A has a property that holds multiple Bs, then A has a to-many relationship with B. If the property is an array, then it is an "),e("strong",[t._v("ordered to-many")]),t._v(" relationship. If the property is a set, then it is an "),e("strong",[t._v("unordered to-many")]),t._v(" relationship.")]),t._v(" "),e("p",[t._v("For an ordered to-many relationship:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("how")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("operation")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("receive notification")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("change.kind")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("change.new")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("change.old")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("call methods on object returned by "),e("code",[t._v("mutableArrayValueForKey:")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("add/remove/replace")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("insertion/removal/replacement")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("present on insertion/replacement")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("present on removal/replacement")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("directly call methods on array")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("add/remove/replace")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("-")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("call "),e("code",[t._v("willChange:valuesAtIndexes:forKey:")]),t._v(" and "),e("code",[t._v("didChange:valuesAtIndexes:forKey:")]),t._v(" pair")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("add/remove/replace")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("insertion/removal/replacement")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("present on insertion/replacement")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("present on removal/replacement")])])])]),t._v(" "),e("p",[t._v("Note:")]),t._v(" "),e("ol",[e("li",[t._v("Only Approach 1 receives new value / old value in notification. Although Approach 2 has the new/old key present, the value is empty (maybe Apple's bug).")]),t._v(" "),e("li",[t._v("Note 2: For an unordered to-many relationship: similar with the above.")]),t._v(" "),e("li",[e("code",[t._v("willChangeXXX")]),t._v(" and "),e("code",[t._v("didChangeXXX")]),t._v(" should be called in pair, otherwise the notification won't be sent.")])]),t._v(" "),e("h2",{attrs:{id:"control-notifications"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#control-notifications"}},[t._v("#")]),t._v(" Control Notifications")]),t._v(" "),e("h3",{attrs:{id:"automatic-and-manual-notifications"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#automatic-and-manual-notifications"}},[t._v("#")]),t._v(" Automatic and Manual Notifications")]),t._v(" "),e("p",[e("strong",[t._v("automatic notifications")]),t._v(" will be sent when mmutate a property with")]),t._v(" "),e("ol",[e("li",[t._v("KVC methods ("),e("code",[t._v("setValue:forKey:")]),t._v(" "),e("code",[t._v("set<Key>:")]),t._v(")")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/AccessingCollectionProperties.html#//apple_ref/doc/uid/10000107i-CH4-SW1",target:"_blank",rel:"noopener noreferrer"}},[t._v("collection proxy object"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Accessor methods ("),e("code",[t._v("setKey:")]),t._v(")")])]),t._v(" "),e("p",[t._v("automatic notification can be disabled by overriding "),e("code",[t._v("automaticallyNotifiesObserversForKey:")]),t._v(".")]),t._v(" "),e("p",[e("strong",[t._v("manual notifications")]),t._v(" will be sent when calling "),e("code",[t._v("willChangeXXX")]),t._v(" and "),e("code",[t._v("didChangeXXX")]),t._v(" pair.")]),t._v(" "),e("h3",{attrs:{id:"dependent-keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dependent-keys"}},[t._v("#")]),t._v(" Dependent Keys")]),t._v(" "),e("p",[t._v("override the class method "),e("code",[t._v("keyPathsForValuesAffectingValueForKey:")]),t._v(" to tell the system that changes to some properties will also affect one specific property, and observations should be sent if these properties change.")])])}),[],!1,null,null,null);e.default=i.exports}}]);